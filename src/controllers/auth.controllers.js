//*IMPORTING:
//*Importing the data model for the User.
const User = require('../models/User.models');

//*#############################- importing libraries -#########################################

const generateJWT = require('../helpers/generate-jwt.helpers');
const bcrypt = require('bcrypt');

ctrlAuth = {};

ctrlAuth.startSession = async (req, res) => {
    const {user_name, user_password} = req.body;

    /* //!Lineas para probar el cÃ³digo
    console.log(req.body)
    */

    try {

        const user = await User.findOne({user_name});
        /* //!Lineas para probar el cÃ³digo
        console.log(user);
        */
        //----------------- INICIO VALIDACIONES -------------------------------------------------------
        
        if(!user){
            return res.status(400).json({
                ok: false,
                message: "Error trying to authenticate ğŸ¤”.",
                //!AquÃ­ la informaciÃ³n adicional (la oraciÃ³n despuÃ©s del punto) sÃ³lo puede estar en desarrollo. no en producciÃ³n
            });
        };

        //*Verifico que el usuario estÃ© activo!
        if(!user.is_active){
            return res.status(400).json({
                ok: false,
                message: "Error trying to authenticate ğŸ•¸ğŸ•·ğŸ•¸."
                //!AquÃ­ la informaciÃ³n adicional (la oraciÃ³n despuÃ©s del punto) sÃ³lo puede estar en desarrollo. no en producciÃ³n
            });
        };

        //*VALIDACIÃ“N DE CONTRASEÃ‘A:
        //*Con la biblioteca bcrypt comparo las contraseÃ±as que envÃ­a el usuario a travÃ©s de un formulario (en este caso en el body del rquest, con la contraseÃ±a que busco en la BD)
        //!la constante validatePass serÃ¡ true o false
        const validatePass = bcrypt.compareSync( user_password , user.user_password ); 

        if(!validatePass){
            return res.status(400).json({
                ok: false,
                message: "Error trying to authenticate ğŸš«."
                //!AquÃ­ la informaciÃ³n adicional (la oraciÃ³n despuÃ©s del punto) sÃ³lo puede estar en desarrollo. no en producciÃ³n
            });
        } else {
            console.log("ContraseÃ±a correcta");
            
        };

        //----------------- FIN VALIDACIONES -------------------------------------------------------

        //*GENERACIÃ“N DE TOKEN:
        //!La lÃ³gica de generaciÃ³n de tokens estÃ¡ en la carpeta helpers
        const token = await generateJWT({ uid: user._id });
        //Cuando se hace la validaciÃ³n del jwt lo que se pega en la request, se pega con el guiÃ³n bajo id ("_id"), y no con el uid. Ver controlador task (mÃ©todo createTask() del archivo task.controllers.js, en la parte de creaciÃ³n de una nueva tarea)
        return res.status(200).json({ 
            message: "Correct password! âœ”",
            message2: `Welcome to the MATRIX âš¡ğŸ•¶âš¡, ${user_name}! â˜˜`,

            token });

    } catch (error) {

        console.log(error);
        return res.status(500).json({ 
            
            message: 'Error trying to LOG IN ğŸ”´ğŸ”˜ğŸ”´' ,
            
        });
    }

};


module.exports = ctrlAuth;


