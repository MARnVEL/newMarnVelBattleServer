
//*#############################- importing libraries -#########################################
const jwt = require('jsonwebtoken');

//*#############################- importing the data models -#########################################
const User = require('../models/User.models');

const validateJWT = async ( req, res, next ) => {

    //Se almacena el token recibido del cliente:
    const token = req.headers.authorization;

    //*Verifico la existencia del token en la petici칩n

    if(!token){
        return res.status(401).json({
            message: 'Error trying to authenticate 游뱂',
        });
    };

    try {

        //*Se comprueba la validez del token, si es v치lido, se obtiene el id del usuario del mismo
        const { uid } = await jwt.verify( token, process.env.JWT_SECRET );

        const theUser = await User.findById( uid );

        if(!theUser){
            return res.status(404).json({
                message: 'Error trying to authenticate! 游뱂'
            })
        }
        
        //*Verifico que el usuario est칠 activo!
        if(!theUser.is_active){
            return res.status(404).json({
                ok: false,
                message: 'Error trying to authenticate! 游돚游동游돚.'
            })
        }

        //! ########
        //!IMPORTANTE: Se a침ade informaci칩n del usuario al request para que pueda ser utilizada en el resto de middlwares
        req.user = theUser;//Esta es la l칤nea de c칩digo que me permite utilizar la informaci칩n del usuario espec칤fico que est치 realizando las consultas. Porque si la request tiene esta info, SIGNIFICA QUE EL USUARIO VALID칍 SU TOKEN Y/O TIENE UN TOKEN V츼LIDO, POR ENDE EST츼 AUTORIZADO A HACER CONSULTAS ESPEC칈FICAS CORRESPONDIENTES A SUS PERMISOS DE USUARIO.

        // Se contin칰a con la ejecuci칩n del resto de la petici칩n
        next();

    } catch (error) {
        console.log(error);
        res.status(401).json({
            message: 'Error trying to authenticate. 游눤游뛂',
        })
    };

};


module.exports = validateJWT;

